REST
	Architecture.
	REST is not a protocol. It is an architectural style.
	It suggests that any request url is received by our application,
	should be redirected to a method based on PATH

	HTTP methods
		GET
		POST
		PUT
		DELETE
		PATCH

	JDK, Eclipse, Jersey fw, Apache Tomcat

	URI
		structure
		same url but different http request methods
		consistent url
	
	Entities
		A POJO class that maps to a table in database
		find all entities
		find entity by id
		add entity
		modify entity
		delete entity

		These are the CRUD operations we did

	HttpRequest and HttpResponse 
		are always allowed to be the parameters of any method
		for input and output

	@Produces
		annotation is used to specify the content type (MIME)
			text/html
			text/xml
			text/json
		specifies that the method returns object of these types

	@Consumes
		annotation is used to specify the content type (MIME)
			text/html
			text/xml
			text/json
		
		specifies that the method accepts parameters of these types

Build, deploy, test the restful webservices

Statelessness:
	Every method in the rest web service is independent.
	There is no state management or session management across methods

Authentication:
	Usually, in RESTful webservices, the authentication and authorization 
	are performed by Open Authentication service like 
		gmail
		facebook
		github
	etc
	using OAuth2

	What is authentication?
		is a process of validating the identity of the user, who claims to be.
	
		whether you are a valid user or not?

Authorization:
	You may be a valid user. You might have passed authentication.
	But you are allowed to do something. Not allowed to do something else.

	What are the permissions you have?
	That is authorization.

	
XSRF/CSRF
	Cross Site Request Forgery

	we are creating a cookie from our program.
	Others can also create a program and read our cookie.
	This is called cross site request forgery

	so to prevent this attack. 
	We can provide access only from specific Cross Origins

In spring fw, we use
	@CrossOrigin(origins={"http://localhost:4200"})

	This will allow access from origins specified as above.

Caching
	Cache remembers some info in memory so that it reduce the time required to retrieve the info next time

Http Status codes
	404,...	any code starts from 4 means, error
	202,... any code starts from 2 means, ok
	5....

	Have a look on the status code.

Annotations under JAX-RS
	Java Api for XML and RS for Restful Services


Let me show you how we can access a restful webservice from a java program.
Old technique

NetClientGet program is uploaded in GIT. check

To access a REST api from another java program, we use Feign Client.

Activity:
-----------

XSRF
Caching in RESTful webservices
Concurrency
HTTP Status codes

------------------------------------------------------------------------------
SOAP web service

SOAP web service was the first web service technique introduced. In the year 2001. 
SOAP 
	Simple Object Access Protocol.
	send / receive data to and fro the client in the form of SOAP messages.

	SOAP messages are XML text
		Envelop
		Body
		optional Header

	SOAP is rigid with only XML formatters. It does not support other formats like JSON.

Difference between SOAP and REST

	SOAP provides only 1 URL for the entire web service.
	REST provides 1 URL per method. Each method with an URL. REST supports micro service architecture.

Shall we see an example for SOAP?

Let me tell you what exactly I am going to do now.

What is the purpose of web service?
	We are exposing some java methods to the client applications.

Lets create 2 methods 
	sum(int, int)
	product(int, int)

1) Create an interface that declares these methods
2) Create a class that implements the above interface
3) Create a web service based on Bottom Up approach (means, the impl code is already available)
4) get the URL for WSDL


What is WSDL?
	Web Services Description Language
		this is a XML document. In fact Documentation of the web service.
		we can get all information related to that webservice.
		like, what are the methods present in the web service?
		what are their parameters/ arguments
		what is the return type?

		all such information can be obtained from the documentation. ie., WSDL
		this kind of documentation is not found in REST. Swagger is used to provide that. (didn't learn)

5) We create one more java project (java project / Dynamic web project / another web service, wherever)
6) we access the webservice using the WSDL url we obtained while creating the web service.

so we create 2 projects
	1) a dynamic web project for web service
	2) a java project to access the web service



http://localhost:8080/my-web-service-1/services/MathsImpl


this is the url for client applications

For client application
i am going to create a client project
usually, it is good idea to open one more instance of eclipse and create client. So that both will run parallely.
When web service is not running, client cannot access the web service.



http://localhost:8080/my-web-service-1/services/MathsImpl?WSDL

IN THE client project,
	right click project, 
		new web service client
		paste the url 	(?WSDL)

	i pull up to start client. Because, test client is sample client program, automatically generated.
	I am going to write the code, so i dont want test client



29-Sep-2021
	Morning	XML assessment
	Afternoon SOAP assessment
30-Sep-2021
	Afternoon REST assessment




UDDI	Universal Description, Discovery and Integration	(a registry where web services are registered)
	and client applications look up for web services in the UDDI
WSDL	Web Services Description Language			(xml document, in fact documentation that explains the web service)

HTTP	HyperText Transfer Protocol
		This is the protocol used by Web services. That makes web services accessible from anywhere in the world.
SOAP
	Simple Object Access Protocol
		this is a message format in XML that SOAP web service send/receive in SOAP format only



We choose SOAP webservice when the data format is XML
and the entire web service is represented by 1 URL

So if the requirement is to share microservices, then REST ful web services are chosen
And REST supports multiple formats including XML

JAX-RS
JAX-WS		Java API for XML Web Services

	we use annotations to create web service.
	@WebService annotation for the class
	@WebMethod annotation for the methods


package com.javacodegeeks.examples.jaxws;
 
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.Style;
 
@WebService
@SOAPBinding(style = Style.RPC)
public interface CalculatorI {
    @WebMethod
    int add(int a, int b);
 
    @WebMethod
    int subtract(int a, int b);
 
    @WebMethod
    int multiply(int a, int b);
 
    @WebMethod
    int divide(int a, int b);
}



//implementation class as below:

package com.javacodegeeks.examples.jaxws;
 
import javax.jws.WebService;
 
@WebService(endpointInterface = "com.javacodegeeks.examples.jaxws.CalculatorI")
public class CalculatorImpl implements CalculatorI {
 
    @Override
    public int add(int a, int b) {
        return a + b;
    }
 
    @Override
    public int subtract(int a, int b) {
        return a - b;
    }
 
    @Override
    public int multiply(int a, int b) {
        return a * b;
    }
 
    @Override
    public int divide(int a, int b) {
        return a / b;
    }
 
}




04
05
06
07
08
09
10
11
12
package com.javacodegeeks.examples.jaxws;
 
import javax.xml.ws.Endpoint;
 
public class CalcPublisher {
 
    public static void main(String[] args) {
        Endpoint ep = Endpoint.create(new CalculatorImpl());
        ep.publish("http://127.0.0.1:10000/calcServer");
    }
 
}




//	the ip address 		127.0.0.1	always means localhost	(ie., the computer on which this program is running)


https://examples.javacodegeeks.com/enterprise-java/jws/jax-ws-web-service-example/


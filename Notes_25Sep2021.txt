Yesterday,
	we learned XML
		Building block of XML
		DTD
		XSD
			namespace
			schemaLocation
			elements, attributes
			complexType
			simpleType
			sequence, all, choice
			min, max
			datatypes:		string, integer, positiveInteger, nonNegativeInteger

		if you see XSD language, it is by default camelCase		first letter is lower case, next every word first letter in upper case
			
		parsers!
			what is the need for parsers?
				Parsers are used to read xml document using programs like java program or javascript
		2 parsers we learn in XML module:
			SAX		xml file, java program for handler, java program main method
			DOM

Lets discuss what is DOM?
-------------------------
	Expansion for DOM:
			Document Object Model
				The aim of DOM is to represent the HTML/XML document as an object.
				If we can represent anything as an object, then we can manipulate that object.
				So if we represent an XML document as an object, we can access any element or even manipulate (insert update delete)

	You know javascript.
		in javascript,
			document.getElementById("txt1").value;		//do you remember? This is DOM program

	so, if you access a XML document using DOM program, you will be able to do the same as above!

we need to parse an xml file to get DOM object	(Document)
	File f=new File("input.xml");
	DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
	DocumentBuilder db=dbf.newDocumentBuilder();
	Document doc=db.parse(f);

		//this doc is the DOM that represents the xml document as an object

	NodeList nList=doc.getElementsByTagName("student");
	


https://www.tutorialspoint.com/java_xml/java_dom_parse_document.htm

Parse
Create
Query
Update


Understand what is DOM
and how to access a XML document (any markup language like HTML, XML) 
	using DOM

-----------------------------------------END OF XML---------------------------------------------------
2) rest webservice
3) soap webservice

-----------------------------------------------
What is a web service?
	have anyone heard about web service?
		cloud Amazon Web Services)	AWS
		communication between programs
		a server running on a computer device, listening for requests at a particular
			port over a network, serving web documents
		communication between devices over a network
		
	these are the definitions obtained from our participants

Web application?
	have you heard about web application / website?
	
	What could be the difference between web application (website) and web service?

is web service, different from web application?
	YES

iS facebook, a web application or web service?
--------------------------------------------------
	it is a web application. Why?
		Because, web application provides
			User Interface (front end)
			Business logic
			Data storage

	these 3 are the components of any application (web/mobile/console/windows)

Web services DO NOT HAVE USER INTERFACE 
	They only have remaining 2 services
			business logic
			data services		(storing, retrieving, etc)

Web services do not have FRONT END

why?
	You said FACEBOOK is a web application. Because, it provides entire 3 services.
	But have you ever seen other websites that allow you to login using FB account?

	ex:
		In udemy.com website, i am able to login using "Facebook" account.

	Now tell me, in udemy.com, what is facebook?	
		web application? or web service?

	Here, facebook is a web service. Because, entire facebook application is not
		shared with udemy.com

Another example,
	Tell me one bank where you have account
		ICICI bank
	Can you login to icici.com and access your account details
		Here, icici.com is a web application

	Can you make payment in BookMyShow.com using icici net banking???????
		yes. Here, icici web service is used.

In all these examples, one thing is common,
	Our entire web application SHOULD not be shared with other enterprise.

Udemy needs Facebook authentication service
BookMyShow needs ICICI payment service

In these situations,
	FACEBOOK / ICICI do not share their entire project with the other enterprise.

They just share a portion of their project to other enterprises.

That is where "web services" come into picture.

Now, what are the challenges in sharing our code with other enterprises?
	our code is created in Java Language.
Other enterprises might create their project in different programming language
	ex: c#	or Visual Basic

so language interoperability.
	remember XML

Web services are 
	web components that are deployed in web application servers that can be 
		accessed by programs created in any programming languages from any platform
		from anywhere

	this is because, the data transferred in a neutral format (XML)

web application server?
	web servers provide space for web applications and provide access from anywhere in the world
	but if those web servers also provide run time to execute programs and produce output,
	then those web servers are also called as web application servers.

	shortly, they are called as 
		Application Servers
		App server

	ex:
		Apache Tomcat Server	(they can provide JRE)
		JBoss
		Weblogic
		WebSphere
		Sun app server	-	Glassfish server


	we are going to use Apache tomcat servers
		they provide web storage and also Runtime Env for java programs

Web services
	web components
	first introduced during 2001
		they were SOAP web services
		SOAP 	Simple Object Access Protocol

	SOAP messages are sent and received by webservice to and fro client applications

SOAP Messages are created in XML language

Later,
another kind of webservice technology was introduced
	REST
		REpresentational State Transfer
			is not a protocol. But architectural style for webservice

	The advantage of REST over SOAP is 
		SOAP supported only XML format of data interchange
	BUT
		REST supported variety of data formats
			including XML
			JSON is the most preferred format of data across applications
	JSON	JavaScript Object Notation

class Employee
{
	private int eid;
	private String firstName;
	private String lastName;
	//assume that setters and getter are there
}

in XML,
<EMPLOYEES>
	<EMPLOYEE>
		<EID>2</EID>	
		<FIRSTNAME>Ram</FIRSTNAME>
		<LASTNAME>Kumar</LASTNAME>
	</EMPLOYEE>
</EMPLOYEES>

IN JSON,

{"eid":"1","firstName":"Ram","lastName":"Kumar"}

FOR array of objects
[{"eid":"1","firstName":"Ram","lastName":"Kumar"}]

in javascript, [] refers to an array

We are learning RESTful web services first. Then SOAP web services.


SMS otp. from our project
how can we send sms OTP FROM OUR project?

we found a webservice in google. that webservice will provide methods

sendSMSIndia("9898989","this is the message");

so if we call this method, through internet, that web service method, can send sms for us

It is not practically possible for us to write every code. sometimes, we need to borrow
some code from other enterprise, because, they are the owner for that code.

In that situation, we need webservice technique that allows one enterprise to call the program from other enterprise.

credit card validation?
	how do you know that credit limit amount has not exceeded.

	how do you know that the account has enought balance amount or not?

	how will you make a transaction in another bank? unless they do not allow

-------------------------------------------------------------------------------------

Lets discuss how practically, we can do that?
	how to create a rest ful webservice?

There are frameworks that help us to create RESTful webservices.
	i) Jersey
	ii) Spring

we are going to learn jersey f/w now.

What this jersey framework do?

Do you know servlet?		(servlets, jsp)

They are web application components

In our project, any request comes, should be received by a "Dispatcher" servlet. 
That servlet is already available in "Jersey" framework.

This jersey fw provides a "dispatcher" servlet that will receive all the requests (based on the3 pattern we specify
and call the methods accordingly

Do you have eclipse in your computer? 
	Eclipse for Java EE developer		(NOT eclipse for Java Developer)

Have you downloaded Apache tomcat server?


1) in eclipse, we create a dynamic web project
	this option will not be there, if you have "Eclipse for Java Developer"
	you should have "Eclipse for Java EE Developer"

2) whenever we create a dynamic web project,
		next-> next-> before finish, select the "deployment descriptor" ie., web.xml
	so that web.xml file is added into our project.

	if you have forgotten to add this,
	later, we can add	
		right click project-> java ee tools -> deployment descriptor stub

	thats how we can add a web.xml file into our project

3) in web.xml
	we configure a servlet (ie already there in jersey fw) 
	such that, all request urls coming with /rest will be received by dispatcher servlet

	Before that, CONVERT the project into Maven Project and add dependencies for jersey


4) convert the project into maven project
	right click the project -> configure -> convert to maven project
		group id:		com.cts.rest
		artifact id:		demo-1

5) add the following dependencies
		<dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
            <version>2.29.1</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <version>2.29.1</version>
        </dependency>
    
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>2.29.1</version>
        </dependency>

	<dependency>
	    <groupId>asm</groupId>
	    <artifactId>asm</artifactId>
	    <version>3.1</version>
	</dependency>

6) go to web.xml and configure the file so that all requests with url /rest will be received by the jersey dispatcher servlet
		    <servlet>
        <servlet-name>Jersey REST Service</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.cts.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey REST Service</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>


7) create a controller class inside the package "com.cts.rest"
	
There are some annotations
	@Path		we specify the path			localhost:8080/projectname/rest/abcd

		@Path("/abcd")

---------------------------
 Before lunch break, we were able to create a RESTful web service 
	
Now, lets create an application that provides CRUD operations

	Create, Read, Update, Delete

how do you access database from java program?
	Which database you learned during SQL module?
		MySql
	Did you create a java program that access mysql?
		jdbc

Before going into a jdbc CRUD operation, demo, 
	Lets see how we can return Objects from our webservice methods.



{"employeeId":1,"firstName":"Rama","lastName":"Krishna"}


@Produces("text/json")
	the @Produces annotation specifies that this method returns a json


	@GET
	@Path("/employee")
	@Produces("text/json")
	public Employee getEmployee()
	{
		return new Employee(1L, "Rama","Krishna");
	}



in real world, if you see already available restful web services, you will understand what we are going to do then.


do you know the http request methods?

	GET
	POST
	PUT
	PATCH 
	DELETE

GET
	returns result

POST
	adds new records

PUT
	updates existing records

PATCH
	updates not all the fields. Updates some of the fields

DELETE
	removes record

These are the standard conventions followed in REST architecture



the CRUD rest api we are going to create
	GET		returns all the entities		(records)
	GET/id		return only 1 entity if found
	POST		add a new entity
	PUT		update existing entity
	DELETE		remove entity


Now, can anyone tell me how to test these mappings,
	GET 		can be tested in browser
	GET/id		can be tested in browser
	POST		cannot be tested in browser address bar. 
			what to do?

to test
	POST, PUT, DELETE, 		We can use post man

Anyone know what is post man?


Demo:
	first lets decide what should be table in the mysql database

BRANCH 
	is the table in the database

 CREATE TABLE branch
   (
    bid VARCHAR(6),
    bname VARCHAR(30),
    bcity VARCHAR(30),
    CONSTRAINT branch_bid_pk PRIMARY KEY(bid) 
   );



INSERT INTO branch VALUES('B00001','Asaf ali road','Delhi');
INSERT INTO branch VALUES('B00002','New delhi main branch','Delhi');
INSERT INTO branch VALUES('B00003','Delhi cantt','Delhi');
INSERT INTO branch VALUES('B00004','Jasola','Delhi');
INSERT INTO branch VALUES('B00005','Mahim','Mumbai');
INSERT INTO branch VALUES('B00006','Vile parle','Mumbai');
INSERT INTO branch VALUES('B00007','Mandvi','Mumbai');
INSERT INTO branch VALUES('B00008','Jadavpur','Kolkata');
INSERT INTO branch VALUES('B00009','Kodambakkam','Chennai');



GET
	http://localhost:8080/demo-1/rest/branch
GET/bid
	http://localhost:8080/demo-1/rest/branch/B00011
POST
	http://localhost:8080/demo-1/rest/branch
PUT
	http://localhost:8080/demo-1/rest/branch
DELETE
	http://localhost:8080/demo-1/rest/branch/B00011




//Branch.java

package com.cts.rest.entity;

public class Branch {
	private String bid;
	private String bname;
	private String bcity;
	
	public Branch() {}

	public Branch(String bid, String bname, String bcity) {
		super();
		this.bid = bid;
		this.bname = bname;
		this.bcity = bcity;
	}

	public String getBid() {
		return bid;
	}

	public void setBid(String bid) {
		this.bid = bid;
	}

	public String getBname() {
		return bname;
	}

	public void setBname(String bname) {
		this.bname = bname;
	}

	public String getBcity() {
		return bcity;
	}

	public void setBcity(String bcity) {
		this.bcity = bcity;
	}
	
}




//BranchDao.java
package com.cts.rest.dao;

import java.sql.SQLException;
import java.util.List;

import com.cts.rest.entity.Branch;

public interface BranchDao {

	int create(Branch branch) throws SQLException;

	List<Branch> read() throws SQLException;

	Branch read(String bid) throws SQLException;

	int update(Branch branch) throws SQLException;

	int delete(String bid) throws SQLException;

}






//BranchDaoImpl.java
package com.cts.rest.dao;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.cts.rest.entity.Branch;

public class BranchDaoImpl implements BranchDao {
	private Connection getConnection() throws SQLException
	{
		Driver driver=new com.mysql.jdbc.Driver();
		return DriverManager.getConnection("jdbc:mysql://localhost:3306/es119","root","");
	}
	
	@Override
	public int create(Branch branch) throws SQLException {
		Connection con = getConnection();
		PreparedStatement st = con.prepareStatement("INSERT INTO Branch VALUES (?,?,?)");
		st.setString(1, branch.getBid());
		st.setString(2, branch.getBname());
		st.setString(3, branch.getBcity());
		int no=st.executeUpdate();
		con.close();
		return no;
	}
	@Override
	public List<Branch> read() throws SQLException {
		Connection con = getConnection();
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery("SELECT * FROM Branch");
		List<Branch> branchList=new ArrayList<Branch>();
		while(rs.next())
		{
			//every iteration gives one row. Each row becomes on object of Branch
			Branch branch=new Branch(rs.getString(1), rs.getString(2), rs.getString(3));
			branchList.add(branch);
		}
		con.close();
		return branchList;
	}
	@Override
	public Branch read(String bid) throws SQLException {
		Connection con = getConnection();
		PreparedStatement st = con.prepareStatement("SELECT * FROM Branch WHERE bid=?");
		st.setString(1, bid);
		ResultSet rs = st.executeQuery();
		Branch branch=null;
		if(rs.next())
		{
			branch=new Branch(rs.getString(1), rs.getString(2), rs.getString(3));
		}
		con.close();
		return branch;
	}
	@Override
	public int update(Branch branch) throws SQLException {
		Connection con = getConnection();
		PreparedStatement st = con.prepareStatement("UPDATE Branch SET bname=?, bcity=? WHERE bid=?");
		
		st.setString(1, branch.getBname());
		st.setString(2, branch.getBcity());
		st.setString(3, branch.getBid());
		
		int no=st.executeUpdate();
		con.close();
		return no;
	}
	@Override
	public int delete(String bid) throws SQLException {
		Connection con = getConnection();
		PreparedStatement st = con.prepareStatement("DELETE FROM Branch WHERE bid=?");
		st.setString(1, bid);
		int no=st.executeUpdate();
		con.close();
		return no;
	}
	
}






//BranchController.java

package com.cts.rest.controller;

import java.sql.SQLException;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.cts.rest.dao.BranchDao;
import com.cts.rest.dao.BranchDaoImpl;
import com.cts.rest.entity.Branch;

@Path("/branch")
public class BranchController {
	
	private BranchDao bdao=new BranchDaoImpl();
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Branch> getAllBranches() throws SQLException {
		return bdao.read();
	}
	
	@GET
	@Path("/{bid}")
	@Produces(MediaType.APPLICATION_JSON)
	public Branch findBranchById(@PathParam("bid") String bid) throws SQLException {
		return bdao.read(bid);
	}
	
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces("text/plain")
	public int addBranch(Branch branch) throws SQLException {
		System.out.println("Executed");
		return bdao.create(branch);
	}
	
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public int updateBranch(Branch branch) throws SQLException {
		return bdao.update(branch);
	}
	
	@DELETE
	@Path("/{bid}")
	@Produces(MediaType.APPLICATION_JSON)
	public int deleteBranch(@PathParam("bid") String bid) throws SQLException {
		return bdao.delete(bid);
	}
	
}




Task:
------
Employee.java			
	eid, firstName, lastName, salary, departmentName

EmployeeDaoImpl.java
	read()		all employees as List<Employee>
	read(eid)
	findEmployeeByDepartmentName
	create
	update
	delete

create the controller 

test the urls in the post man

----------------------
Rest Principles
https://restfulapi.net/


https://docs.jboss.org/resteasy/docs/1.0.2.GA/userguide/html/index.html

the above tutorial
	@PathParam
	@QueryParam
	@MatrixParam
	@FormParam
	@HeaderParam
	@CookieParam
